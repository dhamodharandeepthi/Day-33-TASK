
Q1 Find all the information about each products.
db.products.find().pretty()

Q2 Find the product price which are between 400 to 800
db.products.find({$and:[{product_price:{"$gte": 400}},{product_price:{"$lte": 800}}]}).pretty()

Q3 Find the product price which are not between 400 to 600
db.products.find({$or:[{product_price:{"$lte": 400}},{product_price:{"$gte": 600}}]}).pretty()

Q4 List the four product which are grater than 500 in price 
db.products.find({product_price: {"$gt": 500}}) //Note: there are only 3 products greater than 500 (not inclusive ) in price

Q5 Find the product name and product material of each products
db.products.find({},{product_name:1,product_material:1,_id:0})

Q6 Find the product with a row id of 10
db.products.find({id:{"$eq":"10"}}).pretty()

Q7 Find only the product name and product material
db.products.find({$and:[{product_name: {"$eq": "Practical Soft Shoes"}}, {product_material: {"$eq": "Rubber"}}]}).pretty()

Q8 Find all products which contain the value of soft in product material 
db.products.find({product_material:"Soft"}).pretty()

Q9 Find products which contain product color indigo  and product price 492.00
db.products.find({$and:[{product_color: {"$eq": "indigo"}}, {product_price: {"$eq": 492.00}}]}).pretty() 
//note No such product exists in prdoucts.json

//Q10 Delete the products which product price value are same
//To get the matching prices
var criteria = db.products.aggregate([{ $group: { _id: "$product_price", count: { $sum: 1 } } },{ $match: { count: { $gt: 1 } } },]).toArray().map((d)=> d._id)
// To delete the founded documents based on price
db.products.deleteMany({product_price: {"$in": criteria}})